{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to My Java Code Documentation This is a showcase of my Java code examples. You can view all of them in the Java Code section .","title":"Home"},{"location":"#welcome-to-my-java-code-documentation","text":"This is a showcase of my Java code examples. You can view all of them in the Java Code section .","title":"Welcome to My Java Code Documentation"},{"location":"Excepciones-java/","text":"Lecci\u00f3n: Manejo de Excepciones en Java ( try , catch , finally ) \ud83c\udfaf Objetivo Comprender c\u00f3mo funcionan los bloques try , catch y finally en Java, y c\u00f3mo interact\u00faan con return y excepciones. \ud83e\udde0 Reglas Clave Situaci\u00f3n Resultado return en try , sin return en finally Se ejecuta finally , luego se devuelve el valor del try return en try y en finally Gana el return del finally (anula el del try ) Excepci\u00f3n en try , return en finally El return en finally oculta la excepci\u00f3n return en try , throw en finally Se lanza la excepci\u00f3n de finally , anulando el return \ud83e\uddea Ejemplos clave \u2705 Ejemplo 1: return en try , sin return en finally ```java public static int ejemplo1() { try { return 1; } finally { System.out.println(\"En finally\"); } } Salida: En finally 1 \u2757 Ejemplo 2: return en try y en finally public static int ejemplo2() { try { return 1; } finally { return 2; } } Salida: 2 \ud83d\udeab Ejemplo 3: return en try, throw en finally java Copy Edit public static int ejemplo3() { try { return 1; } finally { throw new RuntimeException(\"Error en finally\"); } } Salida: Exception: Error en finally \ud83d\udd01 Ejemplo 4: Excepci\u00f3n en try, return en finally public static int ejemplo4() { try { int x = 10 / 0; return 5; } finally { return 100; } } Salida: 100 \ud83e\udde8 Tres Excepciones Comunes ArrayIndexOutOfBoundsException int[] arr = new int[2]; System.out.println(arr[5]); // \u00edndice fuera de rango 2. NumberFormatException int num = Integer.parseInt(\"abc\"); // texto no convertible 3. NullPointerException String s = null; System.out.println(s.length()); // acceso a null \ud83d\udd37 Ejemplo Completo: Propagaci\u00f3n de Excepciones public class PropagaExcepcion { private static void metodo2() throws ArrayIndexOutOfBoundsException { try { System.out.println(\"2.1\"); int[] arr = new int[2]; System.out.println(arr[5]); // Lanza excepci\u00f3n System.out.println(\"2.2\"); } catch (ArrayIndexOutOfBoundsException e) { System.out.println(\"2.3\"); throw e; // se propaga } catch (Exception e) { System.out.println(\"2.4\"); } finally { System.out.println(\"2.5\"); } } public static void metodo1() { try { System.out.println(\"1.1\"); metodo2(); System.out.println(\"1.2\"); } catch (Exception e) { System.out.println(\"1.3\"); } finally { System.out.println(\"1.4\"); } } } Preguntas sobre Propagaci\u00f3n de Excepciones \ud83e\udde9 Pregunta a) \u2753 \u00bfQu\u00e9 ocurre al ejecutar PropagaExcepcion.metodo1(); (lanzando ArrayIndexOutOfBoundsException en metodo2() ) \u2705 Ejecuci\u00f3n paso a paso metodo1() comienza: Imprime: 1.1 Llama a metodo2() : Imprime: 2.1 Se lanza ArrayIndexOutOfBoundsException en arr[5] Va al primer catch : imprime 2.3 Lanza la excepci\u00f3n nuevamente: throw e Ejecuta finally : imprime 2.5 Regresa a metodo1() : Captura la excepci\u00f3n en catch (Exception e) : imprime 1.3 Ejecuta finally : imprime 1.4 \ud83d\udda8\ufe0f Salida esperada 1.1 2.1 2.3 2.5 1.3 1.4 \ud83e\udde9 Pregunta a.2) \u2753 \u00bfQu\u00e9 pasa si en lugar de ArrayIndexOutOfBoundsException se lanza NumberFormatException ? Reemplazamos la instrucci\u00f3n por: ```java int x = Integer.parseInt(\"abc\"); // Lanza NumberFormatException \u2705 Ejecuci\u00f3n paso a paso metodo1() comienza: Imprime: 1.1 Llama a metodo2(): Imprime: 2.1 Se lanza NumberFormatException Va al segundo catch (Exception e): imprime 2.4 Ejecuta finally: imprime 2.5 Regresa a metodo1(): Captura la excepci\u00f3n: imprime 1.3 Ejecuta finally: imprime 1.4 \ud83d\udda8\ufe0f Salida esperada 1.1 2.1 2.4 2.5 1.3 1.4 \ud83e\udde9 Pregunta b) \u2753 \u00bfQu\u00e9 pasa si no se lanza ninguna excepci\u00f3n? Quitamos la instrucci\u00f3n que lanza la excepci\u00f3n en metodo2(). \u2705 Ejecuci\u00f3n paso a paso metodo1() comienza: Imprime: 1.1 Llama a metodo2(): Imprime: 2.1 Imprime: 2.2 (no hay excepci\u00f3n) No entra en ning\u00fan catch Ejecuta finally: imprime 2.5 Regresa a metodo1(): Imprime: 1.2 Ejecuta finally: imprime 1.4 \ud83d\udda8\ufe0f Salida esperada 1.1 2.1 2.2 2.5 1.2 1.4 \ud83e\udde9 Ejercicio Final Enunciado public class ExcepcionEjemplo { public static int test() { try { int x = Integer.parseInt(\"abc\"); return 1; } catch (NumberFormatException e) { System.out.println(\"\u00a1Formato inv\u00e1lido!\"); return 2; } finally { System.out.println(\"Bloque finally ejecutado\"); } } public static void main(String[] args) { System.out.println(\"Resultado: \" + test()); } } \u2705 Salida esperada \u00a1Formato inv\u00e1lido! Bloque finally ejecutado Resultado: 2 \ud83d\udcdd Conclusiones El bloque finally siempre se ejecuta. Si finally tiene return o throw, anula lo anterior. Usar return en finally puede ocultar errores.","title":"Excepciones-java.md"},{"location":"Excepciones-java/#leccion-manejo-de-excepciones-en-java-try-catch-finally","text":"","title":"Lecci\u00f3n: Manejo de Excepciones en Java (try, catch, finally)"},{"location":"Excepciones-java/#objetivo","text":"Comprender c\u00f3mo funcionan los bloques try , catch y finally en Java, y c\u00f3mo interact\u00faan con return y excepciones.","title":"\ud83c\udfaf Objetivo"},{"location":"Excepciones-java/#reglas-clave","text":"Situaci\u00f3n Resultado return en try , sin return en finally Se ejecuta finally , luego se devuelve el valor del try return en try y en finally Gana el return del finally (anula el del try ) Excepci\u00f3n en try , return en finally El return en finally oculta la excepci\u00f3n return en try , throw en finally Se lanza la excepci\u00f3n de finally , anulando el return","title":"\ud83e\udde0 Reglas Clave"},{"location":"Excepciones-java/#ejemplos-clave","text":"","title":"\ud83e\uddea Ejemplos clave"},{"location":"Excepciones-java/#ejemplo-1-return-en-try-sin-return-en-finally","text":"```java public static int ejemplo1() { try { return 1; } finally { System.out.println(\"En finally\"); } } Salida: En finally 1 \u2757 Ejemplo 2: return en try y en finally public static int ejemplo2() { try { return 1; } finally { return 2; } } Salida:","title":"\u2705 Ejemplo 1: return en try, sin return en finally"},{"location":"Excepciones-java/#2","text":"\ud83d\udeab Ejemplo 3: return en try, throw en finally java Copy Edit public static int ejemplo3() { try { return 1; } finally { throw new RuntimeException(\"Error en finally\"); } } Salida: Exception: Error en finally \ud83d\udd01 Ejemplo 4: Excepci\u00f3n en try, return en finally public static int ejemplo4() { try { int x = 10 / 0; return 5; } finally { return 100; } } Salida: 100 \ud83e\udde8 Tres Excepciones Comunes ArrayIndexOutOfBoundsException int[] arr = new int[2]; System.out.println(arr[5]); // \u00edndice fuera de rango 2. NumberFormatException int num = Integer.parseInt(\"abc\"); // texto no convertible 3. NullPointerException String s = null; System.out.println(s.length()); // acceso a null \ud83d\udd37 Ejemplo Completo: Propagaci\u00f3n de Excepciones public class PropagaExcepcion { private static void metodo2() throws ArrayIndexOutOfBoundsException { try { System.out.println(\"2.1\"); int[] arr = new int[2]; System.out.println(arr[5]); // Lanza excepci\u00f3n System.out.println(\"2.2\"); } catch (ArrayIndexOutOfBoundsException e) { System.out.println(\"2.3\"); throw e; // se propaga } catch (Exception e) { System.out.println(\"2.4\"); } finally { System.out.println(\"2.5\"); } } public static void metodo1() { try { System.out.println(\"1.1\"); metodo2(); System.out.println(\"1.2\"); } catch (Exception e) { System.out.println(\"1.3\"); } finally { System.out.println(\"1.4\"); } } }","title":"2"},{"location":"Excepciones-java/#preguntas-sobre-propagacion-de-excepciones","text":"","title":"Preguntas sobre Propagaci\u00f3n de Excepciones"},{"location":"Excepciones-java/#pregunta-a","text":"","title":"\ud83e\udde9 Pregunta a)"},{"location":"Excepciones-java/#que-ocurre-al-ejecutar-propagaexcepcionmetodo1","text":"(lanzando ArrayIndexOutOfBoundsException en metodo2() )","title":"\u2753 \u00bfQu\u00e9 ocurre al ejecutar PropagaExcepcion.metodo1();"},{"location":"Excepciones-java/#ejecucion-paso-a-paso","text":"metodo1() comienza: Imprime: 1.1 Llama a metodo2() : Imprime: 2.1 Se lanza ArrayIndexOutOfBoundsException en arr[5] Va al primer catch : imprime 2.3 Lanza la excepci\u00f3n nuevamente: throw e Ejecuta finally : imprime 2.5 Regresa a metodo1() : Captura la excepci\u00f3n en catch (Exception e) : imprime 1.3 Ejecuta finally : imprime 1.4","title":"\u2705 Ejecuci\u00f3n paso a paso"},{"location":"Excepciones-java/#salida-esperada","text":"1.1 2.1 2.3 2.5 1.3 1.4","title":"\ud83d\udda8\ufe0f Salida esperada"},{"location":"Excepciones-java/#pregunta-a2","text":"","title":"\ud83e\udde9 Pregunta a.2)"},{"location":"Excepciones-java/#que-pasa-si-en-lugar-de-arrayindexoutofboundsexception-se-lanza-numberformatexception","text":"Reemplazamos la instrucci\u00f3n por: ```java int x = Integer.parseInt(\"abc\"); // Lanza NumberFormatException \u2705 Ejecuci\u00f3n paso a paso metodo1() comienza: Imprime: 1.1 Llama a metodo2(): Imprime: 2.1 Se lanza NumberFormatException Va al segundo catch (Exception e): imprime 2.4 Ejecuta finally: imprime 2.5 Regresa a metodo1(): Captura la excepci\u00f3n: imprime 1.3 Ejecuta finally: imprime 1.4 \ud83d\udda8\ufe0f Salida esperada 1.1 2.1 2.4 2.5 1.3 1.4","title":"\u2753 \u00bfQu\u00e9 pasa si en lugar de ArrayIndexOutOfBoundsException se lanza NumberFormatException?"},{"location":"Excepciones-java/#pregunta-b","text":"\u2753 \u00bfQu\u00e9 pasa si no se lanza ninguna excepci\u00f3n? Quitamos la instrucci\u00f3n que lanza la excepci\u00f3n en metodo2(). \u2705 Ejecuci\u00f3n paso a paso metodo1() comienza: Imprime: 1.1 Llama a metodo2(): Imprime: 2.1 Imprime: 2.2 (no hay excepci\u00f3n) No entra en ning\u00fan catch Ejecuta finally: imprime 2.5 Regresa a metodo1(): Imprime: 1.2 Ejecuta finally: imprime 1.4 \ud83d\udda8\ufe0f Salida esperada 1.1 2.1 2.2 2.5 1.2 1.4 \ud83e\udde9 Ejercicio Final Enunciado public class ExcepcionEjemplo { public static int test() { try { int x = Integer.parseInt(\"abc\"); return 1; } catch (NumberFormatException e) { System.out.println(\"\u00a1Formato inv\u00e1lido!\"); return 2; } finally { System.out.println(\"Bloque finally ejecutado\"); } } public static void main(String[] args) { System.out.println(\"Resultado: \" + test()); } } \u2705 Salida esperada \u00a1Formato inv\u00e1lido! Bloque finally ejecutado Resultado: 2 \ud83d\udcdd Conclusiones El bloque finally siempre se ejecuta. Si finally tiene return o throw, anula lo anterior. Usar return en finally puede ocultar errores.","title":"\ud83e\udde9 Pregunta b)"},{"location":"file-analysis/","text":"\ud83e\uddfe \u062a\u062d\u0644\u064a\u0644 \u0645\u0644\u0641 \u0646\u0635\u0651\u064a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Java \u0647\u0630\u0627 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u064a\u0642\u0648\u0645 \u0628\u0640: \u0639\u062f\u0651 \u0639\u062f\u062f \u0627\u0644\u0623\u0633\u0637\u0631 \u0641\u064a \u0627\u0644\u0645\u0644\u0641. \u0639\u062f\u0651 \u0639\u062f\u062f \u0627\u0644\u0643\u0644\u0645\u0627\u062a . \u0639\u062f\u0651 \u0639\u062f\u062f \u0627\u0644\u062d\u0631\u0648\u0641 (\u0628\u062f\u0648\u0646 \u0627\u0644\u0641\u0631\u0627\u063a\u0627\u062a) . \ud83e\udde0 \u0643\u0648\u062f Java \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645: ```java import java.io.File; import java.io.IOException; import java.util.Scanner; public class Main { public static void main(String[] args) { int lineCount = 0; int wordCount = 0; int charCount = 0; try { // \ud83d\udccc \u0636\u0639 \u0647\u0646\u0627 \u0645\u0633\u0627\u0631 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u062e\u0627\u0635 \u0628\u0643 File file = new File(\"/Users/TXT/fileMix.txt\"); Scanner scanner = new Scanner(file); while (scanner.hasNextLine()) { String line = scanner.nextLine(); lineCount++; // \u062d\u0630\u0641 \u0627\u0644\u0641\u0631\u0627\u063a\u0627\u062a \u0627\u0644\u0632\u0627\u0626\u062f\u0629 String trimmedLine = line.trim(); // \u2705 \u0639\u062f \u0627\u0644\u0643\u0644\u0645\u0627\u062a if (!trimmedLine.isEmpty()) { String[] words = trimmedLine.split(\"\\\\s+\"); wordCount += words.length; } // \u2705 \u0639\u062f \u0627\u0644\u062d\u0631\u0648\u0641 (\u0628\u062f\u0648\u0646 \u0627\u0644\u0645\u0633\u0627\u0641\u0627\u062a) charCount += trimmedLine.replaceAll(\"\\\\s+\", \"\").length(); } scanner.close(); System.out.println(\"\ud83d\udcca \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0645\u0644\u0641:\"); System.out.println(\"\u0639\u062f\u062f \u0627\u0644\u0633\u0637\u0648\u0631: \" + lineCount); System.out.println(\"\u0639\u062f\u062f \u0627\u0644\u0643\u0644\u0645\u0627\u062a: \" + wordCount); System.out.println(\"\u0639\u062f\u062f \u0627\u0644\u062d\u0631\u0648\u0641 (\u0628\u062f\u0648\u0646 \u0641\u0631\u0627\u063a\u0627\u062a): \" + charCount); } catch (IOException e) { System.out.println(\"\u274c \u062d\u062f\u062b \u062e\u0637\u0623: \" + e.getMessage()); } } }","title":"file-analysis"},{"location":"file-analysis/#java","text":"\u0647\u0630\u0627 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c \u064a\u0642\u0648\u0645 \u0628\u0640: \u0639\u062f\u0651 \u0639\u062f\u062f \u0627\u0644\u0623\u0633\u0637\u0631 \u0641\u064a \u0627\u0644\u0645\u0644\u0641. \u0639\u062f\u0651 \u0639\u062f\u062f \u0627\u0644\u0643\u0644\u0645\u0627\u062a . \u0639\u062f\u0651 \u0639\u062f\u062f \u0627\u0644\u062d\u0631\u0648\u0641 (\u0628\u062f\u0648\u0646 \u0627\u0644\u0641\u0631\u0627\u063a\u0627\u062a) .","title":"\ud83e\uddfe \u062a\u062d\u0644\u064a\u0644 \u0645\u0644\u0641 \u0646\u0635\u0651\u064a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 Java"},{"location":"file-analysis/#java_1","text":"```java import java.io.File; import java.io.IOException; import java.util.Scanner; public class Main { public static void main(String[] args) { int lineCount = 0; int wordCount = 0; int charCount = 0; try { // \ud83d\udccc \u0636\u0639 \u0647\u0646\u0627 \u0645\u0633\u0627\u0631 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u062e\u0627\u0635 \u0628\u0643 File file = new File(\"/Users/TXT/fileMix.txt\"); Scanner scanner = new Scanner(file); while (scanner.hasNextLine()) { String line = scanner.nextLine(); lineCount++; // \u062d\u0630\u0641 \u0627\u0644\u0641\u0631\u0627\u063a\u0627\u062a \u0627\u0644\u0632\u0627\u0626\u062f\u0629 String trimmedLine = line.trim(); // \u2705 \u0639\u062f \u0627\u0644\u0643\u0644\u0645\u0627\u062a if (!trimmedLine.isEmpty()) { String[] words = trimmedLine.split(\"\\\\s+\"); wordCount += words.length; } // \u2705 \u0639\u062f \u0627\u0644\u062d\u0631\u0648\u0641 (\u0628\u062f\u0648\u0646 \u0627\u0644\u0645\u0633\u0627\u0641\u0627\u062a) charCount += trimmedLine.replaceAll(\"\\\\s+\", \"\").length(); } scanner.close(); System.out.println(\"\ud83d\udcca \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0645\u0644\u0641:\"); System.out.println(\"\u0639\u062f\u062f \u0627\u0644\u0633\u0637\u0648\u0631: \" + lineCount); System.out.println(\"\u0639\u062f\u062f \u0627\u0644\u0643\u0644\u0645\u0627\u062a: \" + wordCount); System.out.println(\"\u0639\u062f\u062f \u0627\u0644\u062d\u0631\u0648\u0641 (\u0628\u062f\u0648\u0646 \u0641\u0631\u0627\u063a\u0627\u062a): \" + charCount); } catch (IOException e) { System.out.println(\"\u274c \u062d\u062f\u062b \u062e\u0637\u0623: \" + e.getMessage()); } } }","title":"\ud83e\udde0 \u0643\u0648\u062f Java \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645:"},{"location":"java-code/","text":"Java Program to Count Vowels Este programa en Java solicita al usuario que ingrese una cadena de texto y luego cuenta cu\u00e1ntas vocales (min\u00fasculas 'a', 'e', 'i') contiene. Count Vowels: ```java import java.util.Scanner; public class JavaFx { public static void main(String[] args) { Scanner scan = new Scanner(System.in); System.out.println(\"Introduce cadena:\"); String numbre = scan.nextLine(); int contadorVocales = 0; // Recorremos cada car\u00e1cter de la cadena for (char ch : numbre.toCharArray()) { // Si el car\u00e1cter es una vocal, aumentamos el contador if (\"aei\".indexOf(ch) != -1) { contadorVocales++; } } // Imprimimos la cantidad de vocales encontradas System.out.println(\"La palabra tiene \" + contadorVocales + \" vocales.\"); } }","title":"java_1"},{"location":"java-code/#java-program-to-count-vowels","text":"Este programa en Java solicita al usuario que ingrese una cadena de texto y luego cuenta cu\u00e1ntas vocales (min\u00fasculas 'a', 'e', 'i') contiene.","title":"Java Program to Count Vowels"},{"location":"java-code/#count-vowels","text":"```java import java.util.Scanner; public class JavaFx { public static void main(String[] args) { Scanner scan = new Scanner(System.in); System.out.println(\"Introduce cadena:\"); String numbre = scan.nextLine(); int contadorVocales = 0; // Recorremos cada car\u00e1cter de la cadena for (char ch : numbre.toCharArray()) { // Si el car\u00e1cter es una vocal, aumentamos el contador if (\"aei\".indexOf(ch) != -1) { contadorVocales++; } } // Imprimimos la cantidad de vocales encontradas System.out.println(\"La palabra tiene \" + contadorVocales + \" vocales.\"); } }","title":"Count Vowels:"},{"location":"java_2/","text":"Java Program to Extract Digits from a String Este programa en Java solicita al usuario que ingrese una cadena de texto y luego extrae todos los d\u00edgitos que contiene, si los hay. Extract Digits from a String: ```java import java.util.Scanner; public class JavaFx { public static void main(String[] args) { Scanner scan = new Scanner(System.in); System.out.println(\"Introduce cadena:\"); String nom = scan.nextLine(); StringBuilder st = new StringBuilder(); // Recorremos cada car\u00e1cter de la cadena for (char ch : nom.toCharArray()) { // Si el car\u00e1cter es un d\u00edgito, lo agregamos a 'st' if (Character.isDigit(ch)) { st.append(ch); } } // Si se encontraron d\u00edgitos, los mostramos if (st.length() > 0) { System.out.println(\"El n\u00famero es: \" + st); } } }","title":"java_2"},{"location":"java_2/#java-program-to-extract-digits-from-a-string","text":"Este programa en Java solicita al usuario que ingrese una cadena de texto y luego extrae todos los d\u00edgitos que contiene, si los hay.","title":"Java Program to Extract Digits from a String"},{"location":"java_2/#extract-digits-from-a-string","text":"```java import java.util.Scanner; public class JavaFx { public static void main(String[] args) { Scanner scan = new Scanner(System.in); System.out.println(\"Introduce cadena:\"); String nom = scan.nextLine(); StringBuilder st = new StringBuilder(); // Recorremos cada car\u00e1cter de la cadena for (char ch : nom.toCharArray()) { // Si el car\u00e1cter es un d\u00edgito, lo agregamos a 'st' if (Character.isDigit(ch)) { st.append(ch); } } // Si se encontraron d\u00edgitos, los mostramos if (st.length() > 0) { System.out.println(\"El n\u00famero es: \" + st); } } }","title":"Extract Digits from a String:"},{"location":"java_3/","text":"Funci\u00f3n que reciba un array y devuelva el mayor elemento. Funci\u00f3n que reciba un array y devuelva el mayor elemento.: ```java public class JavaApplication2 { public static void arr (int [] array ){ int max=array[0]; for (int i = 0; i < array.length; i++) { if (array[i] > array[0]){ max = array[i]; } } System.out.println(max); } public static void main(String[] args) { int numbers [] = {2,5,9,33,1}; JavaApplication2.arr(numbers); } }","title":"java_3"},{"location":"java_3/#funcion-que-reciba-un-array-y-devuelva-el-mayor-elemento","text":"```java public class JavaApplication2 { public static void arr (int [] array ){ int max=array[0]; for (int i = 0; i < array.length; i++) { if (array[i] > array[0]){ max = array[i]; } } System.out.println(max); } public static void main(String[] args) { int numbers [] = {2,5,9,33,1}; JavaApplication2.arr(numbers); } }","title":"Funci\u00f3n que reciba un array y devuelva el mayor elemento.:"},{"location":"java_4/","text":"A\u00f1adir l\u00f3gica para ordenar notas y encontrar la nota m\u00e1xima A\u00f1adir l\u00f3gica para ordenar notas y encontrar la nota m\u00e1xima.: ```java import java.util.Scanner; public class JavaApplication2 { public static void main(String[] args) { Scanner scan = new Scanner(System.in); System.out.println(\"Introduce las notas:\"); int arr[] = new int[3]; // Input notes for (int i = 0; i < arr.length; i++) { arr[i] = scan.nextInt(); } // Find maximum int max = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) { max = arr[i]; } } // Sort array in ascending order using bubble sort boolean sort; int temp; do { sort = false; for (int i = 0; i < arr.length - 1; i++) { if (arr[i] > arr[i + 1]) { temp = arr[i]; arr[i] = arr[i + 1]; arr[i + 1] = temp; sort = true; } } } while (sort); // Display sorted notes System.out.println(\"Ordenar las notas de menor a mayor:\"); for (int x : arr) { System.out.print(x + \" \"); } // Display max note System.out.println(\"\\nLa nota m\u00e1xima es: \" + max); } }","title":"java_4"},{"location":"java_4/#anadir-logica-para-ordenar-notas-y-encontrar-la-nota-maxima","text":"```java import java.util.Scanner; public class JavaApplication2 { public static void main(String[] args) { Scanner scan = new Scanner(System.in); System.out.println(\"Introduce las notas:\"); int arr[] = new int[3]; // Input notes for (int i = 0; i < arr.length; i++) { arr[i] = scan.nextInt(); } // Find maximum int max = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] > max) { max = arr[i]; } } // Sort array in ascending order using bubble sort boolean sort; int temp; do { sort = false; for (int i = 0; i < arr.length - 1; i++) { if (arr[i] > arr[i + 1]) { temp = arr[i]; arr[i] = arr[i + 1]; arr[i + 1] = temp; sort = true; } } } while (sort); // Display sorted notes System.out.println(\"Ordenar las notas de menor a mayor:\"); for (int x : arr) { System.out.print(x + \" \"); } // Display max note System.out.println(\"\\nLa nota m\u00e1xima es: \" + max); } }","title":"A\u00f1adir l\u00f3gica para ordenar notas y encontrar la nota m\u00e1xima.:"},{"location":"java_5/","text":"Este programa invierte una cadena de texto dada. Utiliza un ciclo for que recorre la cadena desde el \u00faltimo car\u00e1cter hasta el primero, concatenando cada car\u00e1cter en una nueva cadena para mostrar el resultado invertido. Por ejemplo, convierte \"hello\" en \"olleh\". Invertir una cadena en Java.: ```java public static void main(String[] args) { String a = \"hello\"; String b = \"\"; for (int i = a.length() - 1; i >= 0; i--) { b += a.charAt(i); } System.out.println(b); // print: olleh }","title":"java_5"},{"location":"java_5/#invertir-una-cadena-en-java","text":"```java public static void main(String[] args) { String a = \"hello\"; String b = \"\"; for (int i = a.length() - 1; i >= 0; i--) { b += a.charAt(i); } System.out.println(b); // print: olleh }","title":"Invertir una cadena en Java.:"},{"location":"java_6/","text":"Comparaci\u00f3n de Arrays en Java Este programa en Java solicita al usuario ingresar 20 n\u00fameros enteros. Los primeros 10 se almacenan en un array y los \u00faltimos 10 en otro. Luego, ambos arrays se comparan elemento por elemento para determinar si son iguales o no. Incluye visualizaci\u00f3n de los datos ingresados y el resultado de la comparaci\u00f3n. Comparaci\u00f3n de Arrays en Java .: ```java import java.util.Scanner; public class CompareArrays { public static void main(String[] args) { Scanner scan = new Scanner(System.in); boolean equal = true; int[] arr1 = new int[10]; // Primer array para los primeros 10 n\u00fameros int[] arr2 = new int[10]; // Segundo array para los \u00faltimos 10 n\u00fameros System.out.println(\"Introduce los 20 n\u00fameros enteros:\"); // Leer los primeros 10 n\u00fameros del usuario System.out.println(\"Introduce los primeros 10 n\u00fameros:\"); for (int i = 0; i < arr1.length; i++) { arr1[i] = scan.nextInt(); } // Leer los \u00faltimos 10 n\u00fameros del usuario System.out.println(\"Introduce los \u00faltimos 10 n\u00fameros:\"); for (int i = 0; i < arr2.length; i++) { arr2[i] = scan.nextInt(); } // Mostrar los valores del primer array System.out.print(\"Primer array: \"); for (int num : arr1) { System.out.print(num + \" \"); } System.out.println(); // Mostrar los valores del segundo array System.out.print(\"Segundo array: \"); for (int num : arr2) { System.out.print(num + \" \"); } System.out.println(); // Comparar ambos arrays elemento por elemento for (int i = 0; i < arr1.length; i++) { if (arr1[i] != arr2[i]) { equal = false; // Si hay una diferencia, no son iguales break; // Salir del bucle porque ya sabemos que son diferentes } } // Mostrar si los arrays son iguales o no if (equal) { System.out.println(\"Los arrays son iguales.\"); } else { System.out.println(\"Los arrays no son iguales.\"); } } }","title":"java_6"},{"location":"java_6/#comparacion-de-arrays-en-java","text":"Este programa en Java solicita al usuario ingresar 20 n\u00fameros enteros. Los primeros 10 se almacenan en un array y los \u00faltimos 10 en otro. Luego, ambos arrays se comparan elemento por elemento para determinar si son iguales o no. Incluye visualizaci\u00f3n de los datos ingresados y el resultado de la comparaci\u00f3n.","title":"Comparaci\u00f3n de Arrays en Java"},{"location":"java_6/#comparacion-de-arrays-en-java_1","text":".: ```java import java.util.Scanner; public class CompareArrays { public static void main(String[] args) { Scanner scan = new Scanner(System.in); boolean equal = true; int[] arr1 = new int[10]; // Primer array para los primeros 10 n\u00fameros int[] arr2 = new int[10]; // Segundo array para los \u00faltimos 10 n\u00fameros System.out.println(\"Introduce los 20 n\u00fameros enteros:\"); // Leer los primeros 10 n\u00fameros del usuario System.out.println(\"Introduce los primeros 10 n\u00fameros:\"); for (int i = 0; i < arr1.length; i++) { arr1[i] = scan.nextInt(); } // Leer los \u00faltimos 10 n\u00fameros del usuario System.out.println(\"Introduce los \u00faltimos 10 n\u00fameros:\"); for (int i = 0; i < arr2.length; i++) { arr2[i] = scan.nextInt(); } // Mostrar los valores del primer array System.out.print(\"Primer array: \"); for (int num : arr1) { System.out.print(num + \" \"); } System.out.println(); // Mostrar los valores del segundo array System.out.print(\"Segundo array: \"); for (int num : arr2) { System.out.print(num + \" \"); } System.out.println(); // Comparar ambos arrays elemento por elemento for (int i = 0; i < arr1.length; i++) { if (arr1[i] != arr2[i]) { equal = false; // Si hay una diferencia, no son iguales break; // Salir del bucle porque ya sabemos que son diferentes } } // Mostrar si los arrays son iguales o no if (equal) { System.out.println(\"Los arrays son iguales.\"); } else { System.out.println(\"Los arrays no son iguales.\"); } } }","title":"Comparaci\u00f3n de Arrays en Java"},{"location":"java_7/","text":"Concatenador de Iniciales para C\u00f3digo de Usuario Este proyecto en Java solicita al usuario ingresar su nombre y dos apellidos desde teclado, y genera un c\u00f3digo de usuario compuesto por las tres primeras letras de cada entrada (en may\u00fasculas). Ejemplo: si el usuario introduce \"Lionel\", \"Taraz\u00f3n\" y \"Alcocer\", el resultado ser\u00e1 LIOTARALC. El programa incluye validaci\u00f3n de longitud para evitar errores con entradas menores de tres letras. Ideal para practicar el manejo de cadenas y entrada por teclado en Java. Concatenador de Iniciales para C\u00f3digo de Usuario.: ```java import java.util.Scanner; public class CodigoUsuario { public static void main(String[] args) { Scanner scan = new Scanner(System.in); System.out.print(\"\u0623\u062f\u062e\u0644 \u0627\u0644\u0627\u0633\u0645: \"); String nombre = scan.nextLine(); System.out.print(\"\u0623\u062f\u062e\u0644 \u0627\u0633\u0645 \u0627\u0644\u0639\u0627\u0626\u0644\u0629 \u0627\u0644\u0623\u0648\u0644: \"); String apellido1 = scan.nextLine(); System.out.print(\"\u0623\u062f\u062e\u0644 \u0627\u0633\u0645 \u0627\u0644\u0639\u0627\u0626\u0644\u0629 \u0627\u0644\u062b\u0627\u0646\u064a: \"); String apellido2 = scan.nextLine(); String parteNombre; if (nombre.length() >= 3) { parteNombre = nombre.substring(0, 3); } else { parteNombre = nombre; } String parteApellido1; if (apellido1.length() >= 3) { parteApellido1 = apellido1.substring(0, 3); } else { parteApellido1 = apellido1; } String parteApellido2; if (apellido2.length() >= 3) { parteApellido2 = apellido2.substring(0, 3); } else { parteApellido2 = apellido2; } String codigoUsuario = (parteNombre + parteApellido1 + parteApellido2).toUpperCase(); System.out.println(\"\u0631\u0645\u0632 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u062e\u0627\u0635 \u0628\u0643 \u0647\u0648: \" + codigoUsuario); scan.close(); } }","title":"java_7"},{"location":"java_7/#concatenador-de-iniciales-para-codigo-de-usuario","text":"Este proyecto en Java solicita al usuario ingresar su nombre y dos apellidos desde teclado, y genera un c\u00f3digo de usuario compuesto por las tres primeras letras de cada entrada (en may\u00fasculas). Ejemplo: si el usuario introduce \"Lionel\", \"Taraz\u00f3n\" y \"Alcocer\", el resultado ser\u00e1 LIOTARALC. El programa incluye validaci\u00f3n de longitud para evitar errores con entradas menores de tres letras. Ideal para practicar el manejo de cadenas y entrada por teclado en Java.","title":"Concatenador de Iniciales para C\u00f3digo de Usuario"},{"location":"java_7/#concatenador-de-iniciales-para-codigo-de-usuario_1","text":"```java import java.util.Scanner; public class CodigoUsuario { public static void main(String[] args) { Scanner scan = new Scanner(System.in); System.out.print(\"\u0623\u062f\u062e\u0644 \u0627\u0644\u0627\u0633\u0645: \"); String nombre = scan.nextLine(); System.out.print(\"\u0623\u062f\u062e\u0644 \u0627\u0633\u0645 \u0627\u0644\u0639\u0627\u0626\u0644\u0629 \u0627\u0644\u0623\u0648\u0644: \"); String apellido1 = scan.nextLine(); System.out.print(\"\u0623\u062f\u062e\u0644 \u0627\u0633\u0645 \u0627\u0644\u0639\u0627\u0626\u0644\u0629 \u0627\u0644\u062b\u0627\u0646\u064a: \"); String apellido2 = scan.nextLine(); String parteNombre; if (nombre.length() >= 3) { parteNombre = nombre.substring(0, 3); } else { parteNombre = nombre; } String parteApellido1; if (apellido1.length() >= 3) { parteApellido1 = apellido1.substring(0, 3); } else { parteApellido1 = apellido1; } String parteApellido2; if (apellido2.length() >= 3) { parteApellido2 = apellido2.substring(0, 3); } else { parteApellido2 = apellido2; } String codigoUsuario = (parteNombre + parteApellido1 + parteApellido2).toUpperCase(); System.out.println(\"\u0631\u0645\u0632 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u062e\u0627\u0635 \u0628\u0643 \u0647\u0648: \" + codigoUsuario); scan.close(); } }","title":"Concatenador de Iniciales para C\u00f3digo de Usuario.:"},{"location":"CuentaBancaria/","text":"CuentaBancaria CuentaBancaria es una clase abstracta que representa las operaciones b\u00e1sicas de una cuenta bancaria. Contiene atributos y m\u00e9todos comunes para distintos tipos de cuentas. \ud83e\uddfe Atributos private String iban : N\u00famero de cuenta bancaria internacional. protected int saldo : Saldo actual de la cuenta. private static final int interesAnualBasico : Inter\u00e9s anual b\u00e1sico aplicado a todas las cuentas. \ud83d\udd27 M\u00e9todos public String getIban() Devuelve el n\u00famero IBAN de la cuenta. public int getSaldo() Devuelve el saldo actual de la cuenta. public static int getInteresAnualBasico() Devuelve el valor del inter\u00e9s anual b\u00e1sico. public void ingresar(int cantidad) Suma la cantidad indicada al saldo de la cuenta. public void retirar(int cantidad) Resta la cantidad del saldo si hay suficiente dinero. public void traspasar(CuentaBancaria destino, int cantidad) Transfiere dinero desde esta cuenta a otra cuenta bancaria. public abstract void calcularIntereses() M\u00e9todo abstracto que debe implementarse en las clases hijas para calcular los intereses. \ud83e\uddec Clases hijas CuentaCorriente CuentaAhorro \ud83d\udccc Notas No se puede crear una instancia directamente de CuentaBancaria . Cada subclase debe definir c\u00f3mo se calculan los intereses, dependiendo de sus reglas espec\u00edficas.","title":"Introducci\u00f3n general"},{"location":"CuentaBancaria/#cuentabancaria","text":"CuentaBancaria es una clase abstracta que representa las operaciones b\u00e1sicas de una cuenta bancaria. Contiene atributos y m\u00e9todos comunes para distintos tipos de cuentas.","title":"CuentaBancaria"},{"location":"CuentaBancaria/#atributos","text":"private String iban : N\u00famero de cuenta bancaria internacional. protected int saldo : Saldo actual de la cuenta. private static final int interesAnualBasico : Inter\u00e9s anual b\u00e1sico aplicado a todas las cuentas.","title":"\ud83e\uddfe Atributos"},{"location":"CuentaBancaria/#metodos","text":"","title":"\ud83d\udd27 M\u00e9todos"},{"location":"CuentaBancaria/#public-string-getiban","text":"Devuelve el n\u00famero IBAN de la cuenta.","title":"public String getIban()"},{"location":"CuentaBancaria/#public-int-getsaldo","text":"Devuelve el saldo actual de la cuenta.","title":"public int getSaldo()"},{"location":"CuentaBancaria/#public-static-int-getinteresanualbasico","text":"Devuelve el valor del inter\u00e9s anual b\u00e1sico.","title":"public static int getInteresAnualBasico()"},{"location":"CuentaBancaria/#public-void-ingresarint-cantidad","text":"Suma la cantidad indicada al saldo de la cuenta.","title":"public void ingresar(int cantidad)"},{"location":"CuentaBancaria/#public-void-retirarint-cantidad","text":"Resta la cantidad del saldo si hay suficiente dinero.","title":"public void retirar(int cantidad)"},{"location":"CuentaBancaria/#public-void-traspasarcuentabancaria-destino-int-cantidad","text":"Transfiere dinero desde esta cuenta a otra cuenta bancaria.","title":"public void traspasar(CuentaBancaria destino, int cantidad)"},{"location":"CuentaBancaria/#public-abstract-void-calcularintereses","text":"M\u00e9todo abstracto que debe implementarse en las clases hijas para calcular los intereses.","title":"public abstract void calcularIntereses()"},{"location":"CuentaBancaria/#clases-hijas","text":"CuentaCorriente CuentaAhorro","title":"\ud83e\uddec Clases hijas"},{"location":"CuentaBancaria/#notas","text":"No se puede crear una instancia directamente de CuentaBancaria . Cada subclase debe definir c\u00f3mo se calculan los intereses, dependiendo de sus reglas espec\u00edficas.","title":"\ud83d\udccc Notas"},{"location":"CuentaBancaria/CuentaAhorro/","text":"/ * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template / package javaapplication2; /* * * @author abdelmoumen / public class CuentaAhorro extends CuentaBancaria{ private int saldoMinimo ; public CuentaAhorro(String iban, int saldo) { super(iban, saldo); } @Override public void calcularIntereses() { if (saldoMinimo < 1000){ System.out.println(saldo*(CuentaBancaria.getInteresAnualBasico()/2)); }else{ System.out.println(saldo*(CuentaBancaria.getInteresAnualBasico()*2)); } } }","title":"Clase CuentaAhorro"},{"location":"CuentaBancaria/CuentaBancaria/","text":"/ * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template / package javaapplication2; /* * * @author abdelmoumen / public abstract class CuentaBancaria { private String iban; int saldo; private static final int interesAnualBasico =5; public CuentaBancaria (String iban,int saldo){ this.iban=iban; this.saldo=saldo; } public String getIban() { return iban; } public static int getInteresAnualBasico() { return interesAnualBasico; } public int getSaldo() { return saldo; } public void ingresar (int ingres){ anadir(ingres); } public void retirar (int tirar){ if (tirar > saldo){ System.out.println(\"saldo insifison para tirar\"); }else{ anadir(-tirar); } } public void traspasar (CuentaBancaria destino,int amount){ if (amount >saldo ){ System.out.println(\"saldo insifison para transpasar\"); } else{ anadir(-amount); destino.anadir(amount); } } public void anadir (int anadir){ saldo+=anadir; } public abstract void calcularIntereses(); @Override public String toString() { return \"CuentaBancaria{\" + \"iban=\" + iban + \", saldo=\" + saldo + '}'; } }","title":"Clase CuentaBancaria"},{"location":"CuentaBancaria/CuentaCorriente/","text":"/ * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template / package javaapplication2; /* * * @author abdelmoumen / public class CuentaCorriente extends CuentaBancaria { public CuentaCorriente(String iban, int saldo) { super(iban, saldo); } @Override public void calcularIntereses() { System.out.println(saldo*CuentaBancaria.getInteresAnualBasico()); } }","title":"Clase CuentaCorriente"},{"location":"CuentaBancaria/Main/","text":"/ * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template / package javaapplication2; import java.time.LocalDate; import java.util.ArrayList; import java.util.Arrays; import java.util.Iterator; import java.util.Scanner; /* * * @author abdelmoumen / public class Main { public static void main(String[] args) { CuentaCorriente corre = new CuentaCorriente (\"wn123\",1200); CuentaAhorro ahorro = new CuentaAhorro (\"ssn66\",400); corre.traspasar(ahorro, 500); System.out.println(corre); System.out.println(ahorro); } }","title":"Clase Principal (Main)"}]}